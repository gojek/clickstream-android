// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raccoon.proto

package clickstream.internal.networklayer.proto.raccoon;

/**
 * Protobuf type {@code raystack.raccoon.v1beta1.SendEventResponse}
 */
public  final class SendEventResponse extends
    com.google.protobuf.GeneratedMessageLite<
        SendEventResponse, SendEventResponse.Builder> implements
    // @@protoc_insertion_point(message_implements:raystack.raccoon.v1beta1.SendEventResponse)
    SendEventResponseOrBuilder {
  private SendEventResponse() {
    reason_ = "";
  }
  public static final int STATUS_FIELD_NUMBER = 1;
  private int status_;
  /**
   * <pre>
   *`status` denotes status of the request.
   *Only 3 values are valid. `SUCCESS` means the the request is processed
   *successfully. `ERROR` means the request failed to be processed. `UNKNOWN_STATUS`
   *means Raccoon unable to determine whether the request is success or not.
   * </pre>
   *
   * <code>.raystack.raccoon.v1beta1.Status status = 1;</code>
   * @return The enum numeric value on the wire for status.
   */
  @Override
  public int getStatusValue() {
    return status_;
  }
  /**
   * <pre>
   *`status` denotes status of the request.
   *Only 3 values are valid. `SUCCESS` means the the request is processed
   *successfully. `ERROR` means the request failed to be processed. `UNKNOWN_STATUS`
   *means Raccoon unable to determine whether the request is success or not.
   * </pre>
   *
   * <code>.raystack.raccoon.v1beta1.Status status = 1;</code>
   * @return The status.
   */
  @Override
  public Status getStatus() {
    Status result = Status.forNumber(status_);
    return result == null ? Status.UNRECOGNIZED : result;
  }
  /**
   * <pre>
   *`status` denotes status of the request.
   *Only 3 values are valid. `SUCCESS` means the the request is processed
   *successfully. `ERROR` means the request failed to be processed. `UNKNOWN_STATUS`
   *means Raccoon unable to determine whether the request is success or not.
   * </pre>
   *
   * <code>.raystack.raccoon.v1beta1.Status status = 1;</code>
   * @param value The enum numeric value on the wire for status to set.
   */
  private void setStatusValue(int value) {
      status_ = value;
  }
  /**
   * <pre>
   *`status` denotes status of the request.
   *Only 3 values are valid. `SUCCESS` means the the request is processed
   *successfully. `ERROR` means the request failed to be processed. `UNKNOWN_STATUS`
   *means Raccoon unable to determine whether the request is success or not.
   * </pre>
   *
   * <code>.raystack.raccoon.v1beta1.Status status = 1;</code>
   * @param value The status to set.
   */
  private void setStatus(Status value) {
    status_ = value.getNumber();
    
  }
  /**
   * <pre>
   *`status` denotes status of the request.
   *Only 3 values are valid. `SUCCESS` means the the request is processed
   *successfully. `ERROR` means the request failed to be processed. `UNKNOWN_STATUS`
   *means Raccoon unable to determine whether the request is success or not.
   * </pre>
   *
   * <code>.raystack.raccoon.v1beta1.Status status = 1;</code>
   */
  private void clearStatus() {
    
    status_ = 0;
  }

  public static final int CODE_FIELD_NUMBER = 2;
  private int code_;
  /**
   * <pre>
   *`code` gives more detail of what happened to the request.
   *Details of available `code` can be seen below.
   * </pre>
   *
   * <code>.raystack.raccoon.v1beta1.Code code = 2;</code>
   * @return The enum numeric value on the wire for code.
   */
  @Override
  public int getCodeValue() {
    return code_;
  }
  /**
   * <pre>
   *`code` gives more detail of what happened to the request.
   *Details of available `code` can be seen below.
   * </pre>
   *
   * <code>.raystack.raccoon.v1beta1.Code code = 2;</code>
   * @return The code.
   */
  @Override
  public Code getCode() {
    Code result = Code.forNumber(code_);
    return result == null ? Code.UNRECOGNIZED : result;
  }
  /**
   * <pre>
   *`code` gives more detail of what happened to the request.
   *Details of available `code` can be seen below.
   * </pre>
   *
   * <code>.raystack.raccoon.v1beta1.Code code = 2;</code>
   * @param value The enum numeric value on the wire for code to set.
   */
  private void setCodeValue(int value) {
      code_ = value;
  }
  /**
   * <pre>
   *`code` gives more detail of what happened to the request.
   *Details of available `code` can be seen below.
   * </pre>
   *
   * <code>.raystack.raccoon.v1beta1.Code code = 2;</code>
   * @param value The code to set.
   */
  private void setCode(Code value) {
    code_ = value.getNumber();
    
  }
  /**
   * <pre>
   *`code` gives more detail of what happened to the request.
   *Details of available `code` can be seen below.
   * </pre>
   *
   * <code>.raystack.raccoon.v1beta1.Code code = 2;</code>
   */
  private void clearCode() {
    
    code_ = 0;
  }

  public static final int SENT_TIME_FIELD_NUMBER = 3;
  private long sentTime_;
  /**
   * <pre>
   *`sent_time` is UNIX timestamp populated by Raccoon by the time the response is sent.
   * </pre>
   *
   * <code>int64 sent_time = 3;</code>
   * @return The sentTime.
   */
  @Override
  public long getSentTime() {
    return sentTime_;
  }
  /**
   * <pre>
   *`sent_time` is UNIX timestamp populated by Raccoon by the time the response is sent.
   * </pre>
   *
   * <code>int64 sent_time = 3;</code>
   * @param value The sentTime to set.
   */
  private void setSentTime(long value) {
    
    sentTime_ = value;
  }
  /**
   * <pre>
   *`sent_time` is UNIX timestamp populated by Raccoon by the time the response is sent.
   * </pre>
   *
   * <code>int64 sent_time = 3;</code>
   */
  private void clearSentTime() {
    
    sentTime_ = 0L;
  }

  public static final int REASON_FIELD_NUMBER = 4;
  private String reason_;
  /**
   * <pre>
   *`reason` is additional-human readable information to provide more context to `status` and `code`.
   *There is no predefined structure for this. The value is arbitrary.
   * </pre>
   *
   * <code>string reason = 4;</code>
   * @return The reason.
   */
  @Override
  public String getReason() {
    return reason_;
  }
  /**
   * <pre>
   *`reason` is additional-human readable information to provide more context to `status` and `code`.
   *There is no predefined structure for this. The value is arbitrary.
   * </pre>
   *
   * <code>string reason = 4;</code>
   * @return The bytes for reason.
   */
  @Override
  public com.google.protobuf.ByteString
      getReasonBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(reason_);
  }
  /**
   * <pre>
   *`reason` is additional-human readable information to provide more context to `status` and `code`.
   *There is no predefined structure for this. The value is arbitrary.
   * </pre>
   *
   * <code>string reason = 4;</code>
   * @param value The reason to set.
   */
  private void setReason(
      String value) {
    Class<?> valueClass = value.getClass();
  
    reason_ = value;
  }
  /**
   * <pre>
   *`reason` is additional-human readable information to provide more context to `status` and `code`.
   *There is no predefined structure for this. The value is arbitrary.
   * </pre>
   *
   * <code>string reason = 4;</code>
   */
  private void clearReason() {
    
    reason_ = getDefaultInstance().getReason();
  }
  /**
   * <pre>
   *`reason` is additional-human readable information to provide more context to `status` and `code`.
   *There is no predefined structure for this. The value is arbitrary.
   * </pre>
   *
   * <code>string reason = 4;</code>
   * @param value The bytes for reason to set.
   */
  private void setReasonBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    reason_ = value.toStringUtf8();
    
  }

  public static final int DATA_FIELD_NUMBER = 5;
  private static final class DataDefaultEntryHolder {
    static final com.google.protobuf.MapEntryLite<
        String, String> defaultEntry =
            com.google.protobuf.MapEntryLite
            .<String, String>newDefaultInstance(
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  private com.google.protobuf.MapFieldLite<
      String, String> data_ =
          com.google.protobuf.MapFieldLite.emptyMapField();
  private com.google.protobuf.MapFieldLite<String, String>
  internalGetData() {
    return data_;
  }
  private com.google.protobuf.MapFieldLite<String, String>
  internalGetMutableData() {
    if (!data_.isMutable()) {
      data_ = data_.mutableCopy();
    }
    return data_;
  }
  @Override

  public int getDataCount() {
    return internalGetData().size();
  }
  /**
   * <pre>
   *`data` is arbitrary extra metadata.
   *Arbitrary key-value makes the field flexible for future changes. `req_guid` is also sent as part
   *of `data`. The client may fetch req_guid as key to get the `req_guid` value.
   * </pre>
   *
   * <code>map&lt;string, string&gt; data = 5;</code>
   */
  @Override

  public boolean containsData(
      String key) {
    Class<?> keyClass = key.getClass();
    return internalGetData().containsKey(key);
  }
  /**
   * Use {@link #getDataMap()} instead.
   */
  @Override
  @Deprecated
  public java.util.Map<String, String> getData() {
    return getDataMap();
  }
  /**
   * <pre>
   *`data` is arbitrary extra metadata.
   *Arbitrary key-value makes the field flexible for future changes. `req_guid` is also sent as part
   *of `data`. The client may fetch req_guid as key to get the `req_guid` value.
   * </pre>
   *
   * <code>map&lt;string, string&gt; data = 5;</code>
   */
  @Override

  public java.util.Map<String, String> getDataMap() {
    return java.util.Collections.unmodifiableMap(
        internalGetData());
  }
  /**
   * <pre>
   *`data` is arbitrary extra metadata.
   *Arbitrary key-value makes the field flexible for future changes. `req_guid` is also sent as part
   *of `data`. The client may fetch req_guid as key to get the `req_guid` value.
   * </pre>
   *
   * <code>map&lt;string, string&gt; data = 5;</code>
   */
  @Override

  public String getDataOrDefault(
      String key,
      String defaultValue) {
    Class<?> keyClass = key.getClass();
    java.util.Map<String, String> map =
        internalGetData();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   *`data` is arbitrary extra metadata.
   *Arbitrary key-value makes the field flexible for future changes. `req_guid` is also sent as part
   *of `data`. The client may fetch req_guid as key to get the `req_guid` value.
   * </pre>
   *
   * <code>map&lt;string, string&gt; data = 5;</code>
   */
  @Override

  public String getDataOrThrow(
      String key) {
    Class<?> keyClass = key.getClass();
    java.util.Map<String, String> map =
        internalGetData();
    if (!map.containsKey(key)) {
      throw new IllegalArgumentException();
    }
    return map.get(key);
  }
  /**
   * <pre>
   *`data` is arbitrary extra metadata.
   *Arbitrary key-value makes the field flexible for future changes. `req_guid` is also sent as part
   *of `data`. The client may fetch req_guid as key to get the `req_guid` value.
   * </pre>
   *
   * <code>map&lt;string, string&gt; data = 5;</code>
   */
  private java.util.Map<String, String>
  getMutableDataMap() {
    return internalGetMutableData();
  }

  public static SendEventResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static SendEventResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static SendEventResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static SendEventResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static SendEventResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static SendEventResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static SendEventResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static SendEventResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static SendEventResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static SendEventResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static SendEventResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static SendEventResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(SendEventResponse prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code raystack.raccoon.v1beta1.SendEventResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        SendEventResponse, Builder> implements
      // @@protoc_insertion_point(builder_implements:raystack.raccoon.v1beta1.SendEventResponse)
      SendEventResponseOrBuilder {
    // Construct using clickstream.internal.networklayer.proto.raccoon.SendEventResponse.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     *`status` denotes status of the request.
     *Only 3 values are valid. `SUCCESS` means the the request is processed
     *successfully. `ERROR` means the request failed to be processed. `UNKNOWN_STATUS`
     *means Raccoon unable to determine whether the request is success or not.
     * </pre>
     *
     * <code>.raystack.raccoon.v1beta1.Status status = 1;</code>
     * @return The enum numeric value on the wire for status.
     */
    @Override
    public int getStatusValue() {
      return instance.getStatusValue();
    }
    /**
     * <pre>
     *`status` denotes status of the request.
     *Only 3 values are valid. `SUCCESS` means the the request is processed
     *successfully. `ERROR` means the request failed to be processed. `UNKNOWN_STATUS`
     *means Raccoon unable to determine whether the request is success or not.
     * </pre>
     *
     * <code>.raystack.raccoon.v1beta1.Status status = 1;</code>
     * @param value The status to set.
     * @return This builder for chaining.
     */
    public Builder setStatusValue(int value) {
      copyOnWrite();
      instance.setStatusValue(value);
      return this;
    }
    /**
     * <pre>
     *`status` denotes status of the request.
     *Only 3 values are valid. `SUCCESS` means the the request is processed
     *successfully. `ERROR` means the request failed to be processed. `UNKNOWN_STATUS`
     *means Raccoon unable to determine whether the request is success or not.
     * </pre>
     *
     * <code>.raystack.raccoon.v1beta1.Status status = 1;</code>
     * @return The status.
     */
    @Override
    public Status getStatus() {
      return instance.getStatus();
    }
    /**
     * <pre>
     *`status` denotes status of the request.
     *Only 3 values are valid. `SUCCESS` means the the request is processed
     *successfully. `ERROR` means the request failed to be processed. `UNKNOWN_STATUS`
     *means Raccoon unable to determine whether the request is success or not.
     * </pre>
     *
     * <code>.raystack.raccoon.v1beta1.Status status = 1;</code>
     * @param value The enum numeric value on the wire for status to set.
     * @return This builder for chaining.
     */
    public Builder setStatus(Status value) {
      copyOnWrite();
      instance.setStatus(value);
      return this;
    }
    /**
     * <pre>
     *`status` denotes status of the request.
     *Only 3 values are valid. `SUCCESS` means the the request is processed
     *successfully. `ERROR` means the request failed to be processed. `UNKNOWN_STATUS`
     *means Raccoon unable to determine whether the request is success or not.
     * </pre>
     *
     * <code>.raystack.raccoon.v1beta1.Status status = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearStatus() {
      copyOnWrite();
      instance.clearStatus();
      return this;
    }

    /**
     * <pre>
     *`code` gives more detail of what happened to the request.
     *Details of available `code` can be seen below.
     * </pre>
     *
     * <code>.raystack.raccoon.v1beta1.Code code = 2;</code>
     * @return The enum numeric value on the wire for code.
     */
    @Override
    public int getCodeValue() {
      return instance.getCodeValue();
    }
    /**
     * <pre>
     *`code` gives more detail of what happened to the request.
     *Details of available `code` can be seen below.
     * </pre>
     *
     * <code>.raystack.raccoon.v1beta1.Code code = 2;</code>
     * @param value The code to set.
     * @return This builder for chaining.
     */
    public Builder setCodeValue(int value) {
      copyOnWrite();
      instance.setCodeValue(value);
      return this;
    }
    /**
     * <pre>
     *`code` gives more detail of what happened to the request.
     *Details of available `code` can be seen below.
     * </pre>
     *
     * <code>.raystack.raccoon.v1beta1.Code code = 2;</code>
     * @return The code.
     */
    @Override
    public Code getCode() {
      return instance.getCode();
    }
    /**
     * <pre>
     *`code` gives more detail of what happened to the request.
     *Details of available `code` can be seen below.
     * </pre>
     *
     * <code>.raystack.raccoon.v1beta1.Code code = 2;</code>
     * @param value The enum numeric value on the wire for code to set.
     * @return This builder for chaining.
     */
    public Builder setCode(Code value) {
      copyOnWrite();
      instance.setCode(value);
      return this;
    }
    /**
     * <pre>
     *`code` gives more detail of what happened to the request.
     *Details of available `code` can be seen below.
     * </pre>
     *
     * <code>.raystack.raccoon.v1beta1.Code code = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearCode() {
      copyOnWrite();
      instance.clearCode();
      return this;
    }

    /**
     * <pre>
     *`sent_time` is UNIX timestamp populated by Raccoon by the time the response is sent.
     * </pre>
     *
     * <code>int64 sent_time = 3;</code>
     * @return The sentTime.
     */
    @Override
    public long getSentTime() {
      return instance.getSentTime();
    }
    /**
     * <pre>
     *`sent_time` is UNIX timestamp populated by Raccoon by the time the response is sent.
     * </pre>
     *
     * <code>int64 sent_time = 3;</code>
     * @param value The sentTime to set.
     * @return This builder for chaining.
     */
    public Builder setSentTime(long value) {
      copyOnWrite();
      instance.setSentTime(value);
      return this;
    }
    /**
     * <pre>
     *`sent_time` is UNIX timestamp populated by Raccoon by the time the response is sent.
     * </pre>
     *
     * <code>int64 sent_time = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearSentTime() {
      copyOnWrite();
      instance.clearSentTime();
      return this;
    }

    /**
     * <pre>
     *`reason` is additional-human readable information to provide more context to `status` and `code`.
     *There is no predefined structure for this. The value is arbitrary.
     * </pre>
     *
     * <code>string reason = 4;</code>
     * @return The reason.
     */
    @Override
    public String getReason() {
      return instance.getReason();
    }
    /**
     * <pre>
     *`reason` is additional-human readable information to provide more context to `status` and `code`.
     *There is no predefined structure for this. The value is arbitrary.
     * </pre>
     *
     * <code>string reason = 4;</code>
     * @return The bytes for reason.
     */
    @Override
    public com.google.protobuf.ByteString
        getReasonBytes() {
      return instance.getReasonBytes();
    }
    /**
     * <pre>
     *`reason` is additional-human readable information to provide more context to `status` and `code`.
     *There is no predefined structure for this. The value is arbitrary.
     * </pre>
     *
     * <code>string reason = 4;</code>
     * @param value The reason to set.
     * @return This builder for chaining.
     */
    public Builder setReason(
        String value) {
      copyOnWrite();
      instance.setReason(value);
      return this;
    }
    /**
     * <pre>
     *`reason` is additional-human readable information to provide more context to `status` and `code`.
     *There is no predefined structure for this. The value is arbitrary.
     * </pre>
     *
     * <code>string reason = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearReason() {
      copyOnWrite();
      instance.clearReason();
      return this;
    }
    /**
     * <pre>
     *`reason` is additional-human readable information to provide more context to `status` and `code`.
     *There is no predefined structure for this. The value is arbitrary.
     * </pre>
     *
     * <code>string reason = 4;</code>
     * @param value The bytes for reason to set.
     * @return This builder for chaining.
     */
    public Builder setReasonBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setReasonBytes(value);
      return this;
    }

    @Override

    public int getDataCount() {
      return instance.getDataMap().size();
    }
    /**
     * <pre>
     *`data` is arbitrary extra metadata.
     *Arbitrary key-value makes the field flexible for future changes. `req_guid` is also sent as part
     *of `data`. The client may fetch req_guid as key to get the `req_guid` value.
     * </pre>
     *
     * <code>map&lt;string, string&gt; data = 5;</code>
     */
    @Override

    public boolean containsData(
        String key) {
      Class<?> keyClass = key.getClass();
      return instance.getDataMap().containsKey(key);
    }

    public Builder clearData() {
      copyOnWrite();
      instance.getMutableDataMap().clear();
      return this;
    }
    /**
     * <pre>
     *`data` is arbitrary extra metadata.
     *Arbitrary key-value makes the field flexible for future changes. `req_guid` is also sent as part
     *of `data`. The client may fetch req_guid as key to get the `req_guid` value.
     * </pre>
     *
     * <code>map&lt;string, string&gt; data = 5;</code>
     */

    public Builder removeData(
        String key) {
      Class<?> keyClass = key.getClass();
      copyOnWrite();
      instance.getMutableDataMap().remove(key);
      return this;
    }
    /**
     * Use {@link #getDataMap()} instead.
     */
    @Override
    @Deprecated
    public java.util.Map<String, String> getData() {
      return getDataMap();
    }
    /**
     * <pre>
     *`data` is arbitrary extra metadata.
     *Arbitrary key-value makes the field flexible for future changes. `req_guid` is also sent as part
     *of `data`. The client may fetch req_guid as key to get the `req_guid` value.
     * </pre>
     *
     * <code>map&lt;string, string&gt; data = 5;</code>
     */
    @Override
    public java.util.Map<String, String> getDataMap() {
      return java.util.Collections.unmodifiableMap(
          instance.getDataMap());
    }
    /**
     * <pre>
     *`data` is arbitrary extra metadata.
     *Arbitrary key-value makes the field flexible for future changes. `req_guid` is also sent as part
     *of `data`. The client may fetch req_guid as key to get the `req_guid` value.
     * </pre>
     *
     * <code>map&lt;string, string&gt; data = 5;</code>
     */
    @Override

    public String getDataOrDefault(
        String key,
        String defaultValue) {
      Class<?> keyClass = key.getClass();
      java.util.Map<String, String> map =
          instance.getDataMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     *`data` is arbitrary extra metadata.
     *Arbitrary key-value makes the field flexible for future changes. `req_guid` is also sent as part
     *of `data`. The client may fetch req_guid as key to get the `req_guid` value.
     * </pre>
     *
     * <code>map&lt;string, string&gt; data = 5;</code>
     */
    @Override

    public String getDataOrThrow(
        String key) {
      Class<?> keyClass = key.getClass();
      java.util.Map<String, String> map =
          instance.getDataMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     *`data` is arbitrary extra metadata.
     *Arbitrary key-value makes the field flexible for future changes. `req_guid` is also sent as part
     *of `data`. The client may fetch req_guid as key to get the `req_guid` value.
     * </pre>
     *
     * <code>map&lt;string, string&gt; data = 5;</code>
     */
    public Builder putData(
        String key,
        String value) {
      Class<?> keyClass = key.getClass();
      Class<?> valueClass = value.getClass();
      copyOnWrite();
      instance.getMutableDataMap().put(key, value);
      return this;
    }
    /**
     * <pre>
     *`data` is arbitrary extra metadata.
     *Arbitrary key-value makes the field flexible for future changes. `req_guid` is also sent as part
     *of `data`. The client may fetch req_guid as key to get the `req_guid` value.
     * </pre>
     *
     * <code>map&lt;string, string&gt; data = 5;</code>
     */
    public Builder putAllData(
        java.util.Map<String, String> values) {
      copyOnWrite();
      instance.getMutableDataMap().putAll(values);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:raystack.raccoon.v1beta1.SendEventResponse)
  }
  @Override
  @SuppressWarnings({"unchecked", "fallthrough"})
  protected final Object dynamicMethod(
      MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new SendEventResponse();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          Object[] objects = new Object[] {
            "status_",
            "code_",
            "sentTime_",
            "reason_",
            "data_",
            DataDefaultEntryHolder.defaultEntry,
          };
          String info =
              "\u0000\u0005\u0000\u0000\u0001\u0005\u0005\u0001\u0000\u0000\u0001\f\u0002\f\u0003" +
              "\u0002\u0004\u0208\u00052";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<SendEventResponse> parser = PARSER;
        if (parser == null) {
          synchronized (SendEventResponse.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<SendEventResponse>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:raystack.raccoon.v1beta1.SendEventResponse)
  private static final SendEventResponse DEFAULT_INSTANCE;
  static {
    SendEventResponse defaultInstance = new SendEventResponse();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      SendEventResponse.class, defaultInstance);
  }

  public static SendEventResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<SendEventResponse> PARSER;

  public static com.google.protobuf.Parser<SendEventResponse> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

