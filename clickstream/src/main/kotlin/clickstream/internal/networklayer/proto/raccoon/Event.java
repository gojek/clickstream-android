// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raccoon.proto

package clickstream.internal.networklayer.proto.raccoon;

/**
 * Protobuf type {@code raystack.raccoon.v1beta1.Event}
 */
public  final class Event extends
    com.google.protobuf.GeneratedMessageLite<
        Event, Event.Builder> implements
    // @@protoc_insertion_point(message_implements:raystack.raccoon.v1beta1.Event)
    EventOrBuilder {
  private Event() {
    eventBytes_ = com.google.protobuf.ByteString.EMPTY;
    type_ = "";
  }
  public static final int EVENT_BYTES_FIELD_NUMBER = 1;
  private com.google.protobuf.ByteString eventBytes_;
  /**
   * <pre>
   *`event_bytes` is where you put bytes serialized event.
   * </pre>
   *
   * <code>bytes event_bytes = 1;</code>
   * @return The eventBytes.
   */
  @Override
  public com.google.protobuf.ByteString getEventBytes() {
    return eventBytes_;
  }
  /**
   * <pre>
   *`event_bytes` is where you put bytes serialized event.
   * </pre>
   *
   * <code>bytes event_bytes = 1;</code>
   * @param value The eventBytes to set.
   */
  private void setEventBytes(com.google.protobuf.ByteString value) {
    Class<?> valueClass = value.getClass();
  
    eventBytes_ = value;
  }
  /**
   * <pre>
   *`event_bytes` is where you put bytes serialized event.
   * </pre>
   *
   * <code>bytes event_bytes = 1;</code>
   */
  private void clearEventBytes() {
    
    eventBytes_ = getDefaultInstance().getEventBytes();
  }

  public static final int TYPE_FIELD_NUMBER = 2;
  private String type_;
  /**
   * <pre>
   *`type` denotes an event type that the producer of this proto message may set.
   *It is currently used by raccoon to distribute events to respective Kafka topics. However the
   *users of this proto can use this type to set strings which can be processed in their
   *ingestion systems to distribute or perform other functions.
   * </pre>
   *
   * <code>string type = 2;</code>
   * @return The type.
   */
  @Override
  public String getType() {
    return type_;
  }
  /**
   * <pre>
   *`type` denotes an event type that the producer of this proto message may set.
   *It is currently used by raccoon to distribute events to respective Kafka topics. However the
   *users of this proto can use this type to set strings which can be processed in their
   *ingestion systems to distribute or perform other functions.
   * </pre>
   *
   * <code>string type = 2;</code>
   * @return The bytes for type.
   */
  @Override
  public com.google.protobuf.ByteString
      getTypeBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(type_);
  }
  /**
   * <pre>
   *`type` denotes an event type that the producer of this proto message may set.
   *It is currently used by raccoon to distribute events to respective Kafka topics. However the
   *users of this proto can use this type to set strings which can be processed in their
   *ingestion systems to distribute or perform other functions.
   * </pre>
   *
   * <code>string type = 2;</code>
   * @param value The type to set.
   */
  private void setType(
      String value) {
    Class<?> valueClass = value.getClass();
  
    type_ = value;
  }
  /**
   * <pre>
   *`type` denotes an event type that the producer of this proto message may set.
   *It is currently used by raccoon to distribute events to respective Kafka topics. However the
   *users of this proto can use this type to set strings which can be processed in their
   *ingestion systems to distribute or perform other functions.
   * </pre>
   *
   * <code>string type = 2;</code>
   */
  private void clearType() {
    
    type_ = getDefaultInstance().getType();
  }
  /**
   * <pre>
   *`type` denotes an event type that the producer of this proto message may set.
   *It is currently used by raccoon to distribute events to respective Kafka topics. However the
   *users of this proto can use this type to set strings which can be processed in their
   *ingestion systems to distribute or perform other functions.
   * </pre>
   *
   * <code>string type = 2;</code>
   * @param value The bytes for type to set.
   */
  private void setTypeBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    type_ = value.toStringUtf8();
    
  }

  public static Event parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static Event parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static Event parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static Event parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static Event parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static Event parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static Event parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static Event parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static Event parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static Event parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static Event parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static Event parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(Event prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code raystack.raccoon.v1beta1.Event}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        Event, Builder> implements
      // @@protoc_insertion_point(builder_implements:raystack.raccoon.v1beta1.Event)
      EventOrBuilder {
    // Construct using clickstream.internal.networklayer.proto.raccoon.Event.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     *`event_bytes` is where you put bytes serialized event.
     * </pre>
     *
     * <code>bytes event_bytes = 1;</code>
     * @return The eventBytes.
     */
    @Override
    public com.google.protobuf.ByteString getEventBytes() {
      return instance.getEventBytes();
    }
    /**
     * <pre>
     *`event_bytes` is where you put bytes serialized event.
     * </pre>
     *
     * <code>bytes event_bytes = 1;</code>
     * @param value The eventBytes to set.
     * @return This builder for chaining.
     */
    public Builder setEventBytes(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setEventBytes(value);
      return this;
    }
    /**
     * <pre>
     *`event_bytes` is where you put bytes serialized event.
     * </pre>
     *
     * <code>bytes event_bytes = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearEventBytes() {
      copyOnWrite();
      instance.clearEventBytes();
      return this;
    }

    /**
     * <pre>
     *`type` denotes an event type that the producer of this proto message may set.
     *It is currently used by raccoon to distribute events to respective Kafka topics. However the
     *users of this proto can use this type to set strings which can be processed in their
     *ingestion systems to distribute or perform other functions.
     * </pre>
     *
     * <code>string type = 2;</code>
     * @return The type.
     */
    @Override
    public String getType() {
      return instance.getType();
    }
    /**
     * <pre>
     *`type` denotes an event type that the producer of this proto message may set.
     *It is currently used by raccoon to distribute events to respective Kafka topics. However the
     *users of this proto can use this type to set strings which can be processed in their
     *ingestion systems to distribute or perform other functions.
     * </pre>
     *
     * <code>string type = 2;</code>
     * @return The bytes for type.
     */
    @Override
    public com.google.protobuf.ByteString
        getTypeBytes() {
      return instance.getTypeBytes();
    }
    /**
     * <pre>
     *`type` denotes an event type that the producer of this proto message may set.
     *It is currently used by raccoon to distribute events to respective Kafka topics. However the
     *users of this proto can use this type to set strings which can be processed in their
     *ingestion systems to distribute or perform other functions.
     * </pre>
     *
     * <code>string type = 2;</code>
     * @param value The type to set.
     * @return This builder for chaining.
     */
    public Builder setType(
        String value) {
      copyOnWrite();
      instance.setType(value);
      return this;
    }
    /**
     * <pre>
     *`type` denotes an event type that the producer of this proto message may set.
     *It is currently used by raccoon to distribute events to respective Kafka topics. However the
     *users of this proto can use this type to set strings which can be processed in their
     *ingestion systems to distribute or perform other functions.
     * </pre>
     *
     * <code>string type = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearType() {
      copyOnWrite();
      instance.clearType();
      return this;
    }
    /**
     * <pre>
     *`type` denotes an event type that the producer of this proto message may set.
     *It is currently used by raccoon to distribute events to respective Kafka topics. However the
     *users of this proto can use this type to set strings which can be processed in their
     *ingestion systems to distribute or perform other functions.
     * </pre>
     *
     * <code>string type = 2;</code>
     * @param value The bytes for type to set.
     * @return This builder for chaining.
     */
    public Builder setTypeBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTypeBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:raystack.raccoon.v1beta1.Event)
  }
  @Override
  @SuppressWarnings({"unchecked", "fallthrough"})
  protected final Object dynamicMethod(
      MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new Event();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          Object[] objects = new Object[] {
            "eventBytes_",
            "type_",
          };
          String info =
              "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0000\u0000\u0001\n\u0002\u0208" +
              "";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<Event> parser = PARSER;
        if (parser == null) {
          synchronized (Event.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<Event>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:raystack.raccoon.v1beta1.Event)
  private static final Event DEFAULT_INSTANCE;
  static {
    Event defaultInstance = new Event();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      Event.class, defaultInstance);
  }

  public static Event getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Event> PARSER;

  public static com.google.protobuf.Parser<Event> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

